# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
View(df_data_scientist2)
View(df_data_scientist2)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", "", x)) # suppression des retours à la ligne
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
library(httr)
library(jsonlite)
library(stringi)
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
df_data_engineer <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist <- as.data.frame(clean_dataframe(df_data_scientist))
library(httr)
library(jsonlite)
library(stringi)
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
View(df_data_engineer)
View(df_data_scientist)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", "", x)) # suppression des retours à la ligne
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
library(httr)
library(jsonlite)
library(stringi)
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
df_data_engineer <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist <- as.data.frame(clean_dataframe(df_data_scientist))
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", "", x)) # suppression des retours à la ligne
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
library(httr)
library(jsonlite)
library(stringi)
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
View(df_data_scientist2)
View(df_data_scientist)
library(httr)
library(jsonlite)
library(stringi)
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
View(df_data_engineer)
View(df_data_engineer)
library(httr)
library(jsonlite)
library(stringi)
library(DBI)
library(Rsqlite)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¦ ", "æ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¢ ", "â",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Â", " ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à®", "î",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à»", "û",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", " ", x)) # suppression des retours à la ligne
df = apply(df,2, function(x) gsub("&bull", " ", x)) # suppression des •
df = apply(df,2, function(x) gsub("\\s+", " ", x)) # suppression des espaces en trop
#df = apply(df,2, function(x) gsub("(?<=[\s])\s*|^\s+|\s+$","", x, perl = TRUE)) # suppression des espaces en trop
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","entreprise","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats[,colstokeep]
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
localisation <- data.frame(ID_localisation = integer())
db <- dbConnect(RSQLite::SQLite(), "my-db.sqlite")
#dbDisconnect(mydb)
#unlink("my-db.sqlite")
dbWriteTable(db, "data_engineer", df_data_engineer2)
dbWriteTable(db, "data_engineer", df_data_scientist2)
dbWriteTable(db, "data_engineer", df_data_scientist2)
# Exportation des dataframes.
write.csv(df_data_engineer2,"C:/Users/rodud/Documents/GitHub/M2_Text_Mining/df_data_engineer.csv", row.names = FALSE)
write.csv(df_data_scientist2,"C:/Users/rodud/Documents/GitHub/M2_Text_Mining/df_data_scientist.csv", row.names = FALSE)
colnames(df_data_engineer)
fromJSON(rawToChar(request_data_scientist$content))$resultats
colnames(fromJSON(rawToChar(request_data_scientist$content))$resultats)
fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
View(df_data_engineer)
View(df_data_engineer)
View(df_data_engineer)
View(df_data_engineer)
View(df_data_scientist2)
View(df_data_scientist2)
View(df_data_scientist2)
View(df_data_scientist2)
colnames(df_data_scientist)
df_data_scientist
library(httr)
library(jsonlite)
library(stringi)
library(DBI)
library(Rsqlite)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¦ ", "æ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¢ ", "â",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Â", " ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à®", "î",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à»", "û",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", " ", x)) # suppression des retours à la ligne
df = apply(df,2, function(x) gsub("&bull", " ", x)) # suppression des •
df = apply(df,2, function(x) gsub("\\s+", " ", x)) # suppression des espaces en trop
#df = apply(df,2, function(x) gsub("(?<=[\s])\s*|^\s+|\s+$","", x, perl = TRUE)) # suppression des espaces en trop
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","entreprise","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
colnames(df_data_scientist)
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
colnames(df_data_scientist)
df_data_scientist["lieuTravail"]
class(df_data_scientist["lieuTravail"])
class(df_data_scientist["lieuTravail"])
df_data_scientist["lieuTravail"]
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
df_data_enineer
df_data_engineer
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
colnames(df_data_engineer)
df_data_scientist["lieuTravail"]
df_data_scientist["lieuTravail"]
df_data_scientist["lieuTravail.latitude"]
df_data_scientist["lieuTravail][1]
]
df_data_scientist["lieuTravail"][1]
df_data_scientist["lieuTravail"]
View(request_data_engineer)
View(request_data_scientist)
library(fpp2)
autoplot(elecdaily)
data("elecdaily")
data("elecdaily")
head(elecdaily)
acf(elecdaily)
shiny::runApp('~/GitHub/M2_Text_Mining')
runApp()
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
runApp('~/GitHub/M2_Text_Mining')
install.packages("leaflet")
runApp('~/GitHub/M2_Text_Mining')
library(plotly)
setwd("~/GitHub/M2_Text_Mining")
runApp()
runApp()
àâäéèêëïîôöùûüÿç
aaaeeeeiioouuuyc
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
