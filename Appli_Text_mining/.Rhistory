library(httr)
library(jsonlite)
library(stringi)
library(DBI)
library(Rsqlite)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¦ ", "æ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¢ ", "â",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Â", " ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à®", "î",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à»", "û",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", " ", x)) # suppression des retours à la ligne
df = apply(df,2, function(x) gsub("&bull", " ", x)) # suppression des •
df = apply(df,2, function(x) gsub("\\s+", " ", x)) # suppression des espaces en trop
#df = apply(df,2, function(x) gsub("(?<=[\s])\s*|^\s+|\s+$","", x, perl = TRUE)) # suppression des espaces en trop
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","entreprise","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = df_data_scientist[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
df_data_engineer = df_data_engineer[,colstokeep]
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
localisation <- data.frame(ID_localisation = integer(),
lieu_travail = character(),
User = character(),
stringsAsFactors = FALSE)
df_data_engineer[,'lieuTravail']
df_data_engineer[,'lieuTravail'][1]
df_data_engineer2
View(df_data_scientist2)
View(df_data_scientist2)
colnames(df_data_scientist2)
colnames(df_data_scientist)
View(df_data_scientist)
View(df_data_scientist)
colnames(clean_dataframe(df_data_scientist))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
colnames(df_data_scientist)
class(df_data_scientist)
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
class(df_data_scientist)
colnames(df_data_scientist)
df_data_scientist$salaire
df_data_scientist
colnames(df_data_scientist)
do.call(data.frame, df_data_scientist)
class(df_data_scientist$lieuTravail)
class(df_data_scientist$intitule)
library(httr)
library(jsonlite)
library(stringi)
library(DBI)
library(Rsqlite)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¦ ", "æ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¢ ", "â",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Â", " ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à®", "î",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à»", "û",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", " ", x)) # suppression des retours à la ligne
df = apply(df,2, function(x) gsub("&bull", " ", x)) # suppression des •
df = apply(df,2, function(x) gsub("\\s+", " ", x)) # suppression des espaces en trop
#df = apply(df,2, function(x) gsub("(?<=[\s])\s*|^\s+|\s+$","", x, perl = TRUE)) # suppression des espaces en trop
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","entreprise","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
#df_data_scientist = df_data_scientist[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
#df_data_engineer = df_data_engineer[,colstokeep]
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
library(httr)
library(jsonlite)
library(stringi)
library(DBI)
library(Rsqlite)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¦ ", "æ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¢ ", "â",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Â", " ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à®", "î",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à»", "û",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", " ", x)) # suppression des retours à la ligne
df = apply(df,2, function(x) gsub("&bull", " ", x)) # suppression des •
df = apply(df,2, function(x) gsub("\\s+", " ", x)) # suppression des espaces en trop
#df = apply(df,2, function(x) gsub("(?<=[\s])\s*|^\s+|\s+$","", x, perl = TRUE)) # suppression des espaces en trop
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","entreprise","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
#df_data_scientist = df_data_scientist[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
#df_data_engineer = df_data_engineer[,colstokeep]
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
unnest_dataframes <- function(x) {
y <- do.call(data.frame, x)
if("data.frame" %in% sapply(y, class)) {
unnest_dataframes(y)
} else {
cat('Nested data.frames successfully unpacked\n')
}
y
}
df2 <- unnest_dataframes(df_data_scientist)
df_data_scientist2
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
df2 <- unnest_dataframes(df_data_scientist)
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
df_data_engineer
View(df_data_engineer)
View(df_data_engineer)
colnames(df_data_scientist)
df_data_scientist$formations
class(df_data_scientist$formations)
names(df_data_scientist)
df_data_engineer
library(httr)
library(jsonlite)
library(stringi)
library(DBI)
library(Rsqlite)
rm(list = ls(all = TRUE))
clean_dataframe <- function(df){
df = apply(df,2, function(x) gsub("Ã©", "é",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¨", "è",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¯ ", "ï",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã´", "ô",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã§", "ç",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãª", "ê",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¹", "ù",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã‰", "É",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ãˆ", "È",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã€", "À",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¦ ", "æ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã¢ ", "â",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Å“", "œ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Ã", "à",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("Â", " ",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à®", "î",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("à»", "û",x)) #iso 8859-1 to utf8
df = apply(df,2, function(x) gsub("[\r\n]", " ", x)) # suppression des retours à la ligne
df = apply(df,2, function(x) gsub("&bull", " ", x)) # suppression des •
df = apply(df,2, function(x) gsub("\\s+", " ", x)) # suppression des espaces en trop
#df = apply(df,2, function(x) gsub("(?<=[\s])\s*|^\s+|\s+$","", x, perl = TRUE)) # suppression des espaces en trop
return (df)
}
#Sys.setlocale("LC_ALL","French")
#setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
#setwd("~/Documents/M2_SISE/Text_Mining/Projet")
id_client = "PAR_textminingr_b7458e0fe84fea218e101d411a7f861a49e551f3b9bf18c612a5059bdea3be5b"
cle_secrete = "5feab49ea00bb939a6224dfb224b13d895b7ea21021a67c6468b5a663f410eab"
# https://pole-emploi.io/data/documentation/utilisation-api-pole-emploi/generer-access-token
# https://stackoverflow.com/questions/52569432/invalid-content-type-after-a-post-request-with-httr
# I. Générer un access token (client credentials)
request_body <- list(grant_type = "client_credentials",
client_id = id_client,
client_secret = cle_secrete,
scope = paste("api_offresdemploiv2", "o2dsoffre",
paste0("application_",id_client), sep = " "))
result_auth <- POST("https://entreprise.pole-emploi.fr/connexion/oauth2/access_token",
query = list(realm = "/partenaire"),
body = request_body,
encode = "form")
result_auth
content(result_auth)
auth_JSON = fromJSON(rawToChar(result_auth$content), flatten = TRUE) ; auth_JSON
token = paste("Bearer ", auth_JSON$access_token) ; token
# II. Requêter une API
# Méthodologie :
#    - request contient du code hexadecimal (https://cryptii.com/pipes/hex-to-text)
#    - pour transformer cette requete en dataframe, il faut convertir l'hexadecimal en caractere,
#      ce qui donne du JSON, puis convetir ce format JSON en r
#Colonnes à garder
colstokeep = c("intitule","description","dateCreation","lieuTravail","romeCode","romeLibelle","appellationlibelle","entreprise","typeContrat","typeContratLibelle","natureContrat","experienceExige","experienceLibelle","secteurActivite","secteurActiviteLibelle")
# Data scientist
request_data_scientist = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+scientist",
add_headers(Authorization = token))
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = df_data_scientist[,colstokeep]
# Data engineer
request_data_engineer = GET("https://api.emploi-store.fr/partenaire/offresdemploi/v2/offres/search?motsCles=Data+engineer",
add_headers(Authorization = token))
df_data_engineer = fromJSON(rawToChar(request_data_engineer$content))$resultats
df_data_engineer = df_data_engineer[,colstokeep]
df_data_scientist
class(df_data_scientist)
colnames(df_data_scientist)
class(df_data_scientist2)
df_data_engineer2 <- as.data.frame(clean_dataframe(df_data_engineer))
df_data_scientist2 <- as.data.frame(clean_dataframe(df_data_scientist))
as.data.frame(df_data_engineer)
colnames(as.data.frame(df_data_engineer))
colnames(df_data_engineer2)
df_data_scientist$lieuTravail
colnames(df_data_scientist$lieuTravail)
df_data_scientist$lieuTravail["libelle"]
df_data_scientist$lieuTravail[,!["commune"]]
df_data_scientist$lieuTravail[,!c("commune")]
df_data_scientist$lieuTravail[,-c("commune")]
df_data_scientist$lieuTravail[,"commune"]
df_data_scientist$lieuTravail[,-"commune"]
df_data_scientist$lieuTravail[,-c(commune)]
df_data_scientist$lieuTravail[,-c("commune")]
df_data_scientist$lieuTravail = df_data_scientist$lieuTravail[,!(names(df_data_scientist$lieuTravail) %in% c("commune"))]
df_data_scientist
colnames(df_data_scientist$lieuTravail)
id <- seq.int(nrow(df_data_scientist))
df_data_scientist$lieuTravail = cbind(id,df_data_scientist$lieuTravail)
View(df_data_scientist)
View(df_data_scientist)
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = df_data_scientist[,colstokeep]
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail = cbind(id,df_data_scientist$lieuTravail)
lieuTravail
lieuTravail %>% distinct()
library(dplyr)
lieuTravail %>% distinct()
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude","codepostal")]
lieuTravail <-  cbind(id,df_data_scientist$lieuTravail)
lieuTravail <- lieuTravail %>% distinct()
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = df_data_scientist[,colstokeep]
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude","codepostal")]
lieuTravail
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude","codePostal")]
lieuTravail <-  cbind(id,df_data_scientist$lieuTravail)
lieuTravail <- lieuTravail %>% distinct()
lieuTravail
lieuTravail[order(libelle),]
lieuTravail[order("libelle"),]
mtcars[order(mpg),]
lieuTravail[order(lieuTravail$libelle),]
lieuTravail[order(lieuTravail$libelle),]
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude")]
lieuTravail <-  cbind(id,df_data_scientist$lieuTravail)
lieuTravail <- lieuTravail %>% distinct()
lieuTravail[order(lieuTravail$libelle),]
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude")]
lieuTravail <- lieuTravail %>% distinct()
lieuTravail <-  cbind(id,df_data_scientist$lieuTravail)
lieuTravail[order(lieuTravail$libelle),]
lieuTravail <- lieuTravail %>% distinct()
lieuTravail
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude")]
lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude","commune")]
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude","commune")]
lieuTravail <- lieuTravail %>% distinct()
lieuTravail <-  cbind(id,df_data_scientist$lieuTravail)
lieuTravail[order(lieuTravail$libelle),]
lieuTravail
lieuTravail <- df_data_scientist$lieuTravail
lieuTravail <- lieuTravail[,c("libelle","latitude","longitude","commune")]
lieuTravail
lieuTravail <- lieuTravail %>% distinct()
lieuTravail
lieuTravail <-  cbind(id,lieuTravail)
id <- seq.int(nrow(lieuTravail))
lieuTravail <-  cbind(id,lieuTravail)
lieuTravail[order(lieuTravail$libelle),]
df_data_scientist = fromJSON(rawToChar(request_data_scientist$content))$resultats
df_data_scientist = df_data_scientist[,colstokeep]
df_data_scientist
df_data_scientist$typeContrat
df_data_scientist[,c("typecontrat")]
df_data_scientist[,c("typeContrat")]
df_data_scientist[,c("typeContrat","typeContratLibelle")]
df_data_engineer$romeCode
df_data_engineer[,c("typeContrat","typeContratLibelle")]
df_data_engineer[,c("romeCode","romeLibelle","appellationlibelle")]
df_data_engineer
View(df_data_engineer)
View(df_data_engineer)
library(shiny)
ui <- fluidPage(
"Hello, world !!!"
)
server <- function(input,output,session)
shinyApp (ui = ui, server = server)
View(ui)
View(ui)
install.packages('rsconnect')
ui <- fluidPage(
"Hello, world !!!"
)
ui <- fluidPage(
"Hello, world !!!"
)
shiny::runApp()
setwd("~/GitHub/M2_Text_Mining/Appli_Text_mining")
shiny::runApp()
library(shiny)
ui <- fluidPage(
"Hello, world !!!"
)
server <- function(input,output,session)
shinyApp (ui = ui, server = server)
shiny::runApp()
install.packages("shinydashboard")
