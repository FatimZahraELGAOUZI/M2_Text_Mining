token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
?setup_twitter_oauth
library(twitteR)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
library("openssl")
library("httpuv")
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
library("openssl")
library(base64enc)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
#il y en a d’autres plus récentes, mais celle-ci est souple et plutôt fiable
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(twitteR)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
install.packages("twitteR")
install.packages("twitteR")
install.packages("twitteR")
#il y en a d’autres plus récentes, mais celle-ci est souple et plutôt fiable
#devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(twitteR)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
rm(list = ls(all = TRUE))
#il y en a d’autres plus récentes, mais celle-ci est souple et plutôt fiable
#devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(twitteR)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
?setup_twitter_oauth
library(base64enc)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
library(ROAuth)
install.packages("ROAuth")
library(ROAuth)
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
library(base64enc)
library("bitops")
library("RCurl")
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
rm(list = ls(all = TRUE))
#il y en a d’autres plus récentes, mais celle-ci est souple et plutôt fiable
#devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(twitteR)
library("openssl")
library("httpuv")
library(ROAuth)
library(base64enc)
library("bitops")
library("RCurl")
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
rm(list = ls(all = TRUE))
#il y en a d’autres plus récentes, mais celle-ci est souple et plutôt fiable
#devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(twitteR)
library("openssl")
library("httpuv")
library(ROAuth)
library(base64enc)
library("bitops")
library("RCurl")
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
rm(list = ls(all = TRUE))
#importation de la librairie
#il y en a d’autres plus récentes, mais celle-ci est souple et plutôt fiable
#devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
library(twitteR)
library("openssl")
library("httpuv")
library(ROAuth)
library(base64enc)
library("bitops")
library("RCurl")
api_key <- "TraPHdzPotIpTsvlFaI0OZwYb"
api_secret <- "Kwy4mSezXqjOgdtqyb4lOEnxCAva2It47xBTy9cxYZuAPeHzqn"
token <- "1486836271041368070-f2DRMaapKjsI79Fyf1N3bkXHvGlewa"
token_secret <- "BOfn2s3Yab5lhzt9QsOakBO7AnPnPvMxgvoTRqUzc6nVW"
#Créer une connexion avec  Twitter
setup_twitter_oauth(api_key, api_secret, token, token_secret)
tweets <- searchTwitter("#ol",n=10,lang="fr")
print(length(tweets))
shiny::runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
shiny::runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
shiny::runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
runApp('M2_SISE/Text_Mining/Projet')
shiny::runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
df_carto <- read_csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv")
View(df_carto)
?read_csv
head(df_carto)
View(df_carto)
df_carto <- read_csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv", encoding = "latin1")
df_carto <- read_csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv", encoding = "UTF-8")
df_carto <- read_csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv", locale(encoding = "UTF-8"))
View(df_carto)
df_carto <- read_csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv")
df_carto %>% select(-1)
Encoding(dfEntreprise[["nom_entreprise"]]) = "UTF-8"
Encoding(df_carto[["nom_entreprise"]]) = "UTF-8"
Encoding(df_carto[["nom_region"]]) = "UTF-8"
head(df_carto)
View(df_carto)
df_carto = Encoding(df_carto[["nom_region"]]) = "UTF-8"
library(readr)
df_carto <- read.csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv", encoding = "latin1")
View(df_carto)
df_carto %>% select(-1)
head(df_carto)
france <- ne_states(country = "France", returnclass = "sf") %>%
filter(!name %in% c("Guyane française", "Martinique", "Guadeloupe", "La Réunion", "Mayotte"))
library(rnaturalearth)
install.packages("rnaturalearth")
library(rnaturalearth)
tm_shape(france) +
tm_polygons(col = "provnum_ne")
world_map <- map_data("world")
world_map
ggplot(world_map)
world_map <- map_data("france")
world_map
ggplot(world_map)
ggplot(world_map)
france_map <- map_data("france")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill="lightgray", colour = "white")
View(df_carto)
france_map <- map_data("france")
ggplot(world_map, aes(label = df_carto$nom_region)) +
geom_polygon(fill="lightgray", colour = "white")
france_map <- map_data("france")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill="lightgray", colour = "white")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_sf(aes(fill = df_carto$nb)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
france_map <- map_data("france")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_sf(aes(fill = df_carto$nb)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
install.packages("sf")
library(sf)
View(france_map)
#Importation du package
library(raster)
install.packages("raster")
#Importation du package
library(raster)
#Importation d'une base de données avec les résultats des élections présidentielles de 2012, premier tour
base2012=read.csv2("https://dimension.usherbrooke.ca/donnees/FPP.csv", header=TRUE, encoding="latin1")
#Importations des packages
library(ggmap)
install.packages("ggmap")
#Importations des packages
library(ggmap)
library(ggplot2)
#Importation d'une petite base de données dans laquelle on trouve: nom, latitude et longitude et population
baseVilles=read.csv2("https://dimension.usherbrooke.ca/donnees/FVP.csv", header=TRUE, encoding="latin1")
#Pour voir la base
head(baseVilles)
#Tranformation des informations en données numériques
baseVilles$Latitude=as.numeric(as.character(baseVilles$Latitude))
baseVilles$Longitude=as.numeric(as.character(baseVilles$Longitude))
baseVilles$Population=as.numeric(as.character(baseVilles$Population))
#Obtention des données
map <- get_map(location=c(lon = 1.7, lat = 47), zoom = 6, source="google",maptype="terrain",crop=TRUE, language= "fr-FR")
#Construction de la carte avec ajout des points représentant la taille de la population
ggmap(map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
#Obtention des données
map <- get_map(location=c(lon = 1.7, lat = 47), zoom = 6, source="google",maptype="terrain",crop=TRUE, language= "fr-FR")
ggmap(france_map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
ggmap(france_map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
View(france_map)
#Importations des packages
library(ggmap)
library(ggplot2)
#Importation d'une petite base de données dans laquelle on trouve: nom, latitude et longitude et population
baseVilles=read.csv2("https://dimension.usherbrooke.ca/donnees/FVP.csv", header=TRUE, encoding="latin1")
#Pour voir la base
head(baseVilles)
#Tranformation des informations en données numériques
baseVilles$Latitude=as.numeric(as.character(baseVilles$Latitude))
baseVilles$Longitude=as.numeric(as.character(baseVilles$Longitude))
baseVilles$Population=as.numeric(as.character(baseVilles$Population))
#Obtention des données
map <- get_map(location=c(lon = 1.7, lat = 47), zoom = 6, source="google",maptype="terrain",crop=TRUE, language= "fr-FR")
#Construction de la carte avec ajout des points représentant la taille de la population
ggmap(map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
library(raster)
#Importation d'une base de données avec les résultats des élections présidentielles de 2012, premier tour
base2012=read.csv2("https://dimension.usherbrooke.ca/donnees/FPP.csv", header=TRUE, encoding="latin1")
dim(base2012)
head(base2012)
#Importation des formes
formes <- getData(name="GADM", country="FRA", level=2)
#Établissement de l'index
idx <- match(formes$NAME_1, base2012$regions)
#Tranfert des données pour les six principaux candidats en fonction de la règle de concordance
concordance <- base2012[idx, "Hollande_p"]
formes$Hollande_p <- concordance
concordance <- base2012[idx, "Sarkozy_p"]
formes$Sarkozy_p <- concordance
#Tracage de la première carte: Hollande
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'red'))
spplot(formes, "Hollande_p",col.regions=couleurs(30),  main=list(label="Appuis en % à François Hollande\n lors de l'élection présidentielle de 2012",cex=.8))
#Tracage de la deuxième carte: Sarkozy
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(formes, "Sarkozy_p",col.regions=couleurs(30),  main=list(label="Appuis en % à Nicolas Sarkozy\n lors de l'élection présidentielle de 2012",cex=.8))
#Importation du package
library(raster)
#Importation d'une base de données avec les résultats des élections présidentielles de 2012, premier tour
base2012=read.csv2("https://dimension.usherbrooke.ca/donnees/FPP.csv", header=TRUE, encoding="latin1")
dim(base2012)
head(base2012)
#Importation des formes
formes <- getData(name="GADM", country="FRA", level=2)
#Importation du package
library(raster)
#Établissement de l'index
idx <- match(formes$NAME_1, base2012$regions)
ggplot(map_data("france"))
ggplot(map_data("france"))
ggmap(france_map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
#Construction de la carte avec ajout des points représentant la taille de la population
ggmap(map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
france_map <- map_data("france")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_sf(aes(fill = df_carto$nb)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
world_map <- map_data("france")
world_map
ggplot(world_map)
geom_sf(data = oz_states, mapping = aes(fill = NAME), show.legend = FALSE)
france_map <- map_data("france")
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_sf(aes(fill = df_carto$nb)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
#Importation du package
library(raster)
#Importation d'une base de données avec les résultats des élections présidentielles de 2012, premier tour
base2012=read.csv2("https://dimension.usherbrooke.ca/donnees/FPP.csv", header=TRUE, encoding="latin1")
dim(base2012)
head(base2012)
#Importation des formes
formes <- getData(name="GADM", country="FRA", level=2)
#Établissement de l'index
idx <- match(formes$NAME_1, base2012$regions)
#Tranfert des données pour les six principaux candidats en fonction de la règle de concordance
concordance <- base2012[idx, "Hollande_p"]
formes$Hollande_p <- concordance
concordance <- base2012[idx, "Sarkozy_p"]
formes$Sarkozy_p <- concordance
#Tracage de la première carte: Hollande
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'red'))
spplot(formes, "Hollande_p",col.regions=couleurs(30),  main=list(label="Appuis en % à François Hollande\n lors de l'élection présidentielle de 2012",cex=.8))
#Tracage de la deuxième carte: Sarkozy
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'blue'))
spplot(formes, "Sarkozy_p",col.regions=couleurs(30),  main=list(label="Appuis en % à Nicolas Sarkozy\n lors de l'élection présidentielle de 2012",cex=.8))
#Importations des packages
library(ggmap)
library(ggplot2)
#Importation d'une petite base de données dans laquelle on trouve: nom, latitude et longitude et population
baseVilles=read.csv2("https://dimension.usherbrooke.ca/donnees/FVP.csv", header=TRUE, encoding="latin1")
#Pour voir la base
head(baseVilles)
#Tranformation des informations en données numériques
baseVilles$Latitude=as.numeric(as.character(baseVilles$Latitude))
baseVilles$Longitude=as.numeric(as.character(baseVilles$Longitude))
baseVilles$Population=as.numeric(as.character(baseVilles$Population))
#Obtention des données
map <- get_map(location=c(lon = 1.7, lat = 47), zoom = 6, source="google",maptype="terrain",crop=TRUE, language= "fr-FR")
#Construction de la carte avec ajout des points représentant la taille de la population
ggmap(map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
france_map <- map_data("france")
ggmap(france_map)+
geom_point(aes(x = baseVilles$Longitude, y = baseVilles$Latitude),  alpha = .3, color = "red",  data=baseVilles, size= (baseVilles$Population/100000)*2)
ggplot(map_data("france"))
ggplot(map_data("france"))
df_carto <- read.csv("M2_SISE/Text_Mining/Projet/nb_offre_par_region.csv", encoding = "latin1")
df_carto %>% select(-1)
head(df_carto)
tapply(df_carto, nom_region, sum)
tapply(df_carto, df_carto$nom_region, sum)
tapply(df_carto$nb, df_carto$nom_region, sum)
df_carto <- read.csv("M2_SISE/Text_Mining/Projet/nb_offre_by_dep.csv", encoding = "latin1")
View(df_carto)
df_carto <- read.csv("M2_SISE/Text_Mining/Projet/nb_offre_by_dep.csv", encoding = "latin1")
df_carto %>% select(-1)
head(df_carto)
View(df_carto)
tapply(df_carto$nb, df_carto$nom_region, sum)
tapply(df_carto$nb, df_carto$nom_departement, sum)
library(ggplot2)
france <- map_data("france")
head(france)
var <- data.frame(freq=tapply(df$nb, df$nom_departement, sum)) # using rows as a dummy variable
var$var1 <- row.names(var)
head(var)
france$variable <- var$freq[match(france$region,var$var1)]
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable), col=NA,lwd=0)
map + scale_colour_gradient(low='white', high='grey20')
map + scale_colour_grey()
############################################################################
df = df_carto
library(ggplot2)
france <- map_data("france")
head(france)
var <- data.frame(freq=tapply(df$nb, df$nom_departement, sum)) # using rows as a dummy variable
var$var1 <- row.names(var)
head(var)
france$variable <- var$freq[match(france$region,var$var1)]
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable), col=NA,lwd=0)
map + scale_colour_gradient(low='white', high='grey20')
map + scale_colour_grey()
df = df_carto
library(ggplot2)
france <- map_data("france")
head(france)
var <- data.frame(freq=tapply(df$nb, df$nom_departement, sum)) # using rows as a dummy variable
var$var1 <- row.names(var)
head(var)
france$variable <- var$freq[match(france$region,var$var1)]
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable), col=NA,lwd=0)
map
df = df_carto
library(ggplot2)
france <- map_data("france")
head(france)
var <- data.frame(freq=tapply(df$nb, df$nom_departement, sum)) # using rows as a dummy variable
var$var1 <- row.names(var)
head(var)
france$variable <- var$freq[match(france$region,var$var1)]
france$variable[is.na(france$variable)] <- 0
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable), col=NA,lwd=0)
map
?geom_polygon
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable, colour = "red"), col=NA,lwd=0)
##############################################
df = df_carto
library(ggplot2)
france <- map_data("france")
head(france)
var <- data.frame(freq=tapply(df$nb, df$nom_departement, sum)) # using rows as a dummy variable
var$var1 <- row.names(var)
head(var)
france$variable <- var$freq[match(france$region,var$var1)]
france$variable[is.na(france$variable)] <- 0
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable, colour = "red"), col=NA,lwd=0)
map
?geom_polygon
############################################################################
df = df_carto
library(ggplot2)
france <- map_data("france")
head(france)
var <- data.frame(freq=tapply(df$nb, df$nom_departement, sum)) # using rows as a dummy variable
var$var1 <- row.names(var)
head(var)
france$variable <- var$freq[match(france$region,var$var1)]
france$variable[is.na(france$variable)] <- 0
map <- ggplot(france, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=variable), col="red",lwd=0)
map
?scale_fill_continuous
getOption("ggplot2.continuous.fill")
runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
runApp()
runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
shiny::runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
runApp('M2_SISE/Text_Mining/Projet/M2_Text_Mining/shiny')
rm(list = ls(all = TRUE))
setwd("~/Documents/M2_SISE/Text_Mining/Projet")
library(dplyr)
library(tidyverse)
library(tidytext)
library(tm)
library(wordcloud)
library(FactoMineR)
library(factoextra)
library(gplots)
library(graphics)
library(corrplot)
library(questionr)
Unaccent <- function(text) {
text <- gsub("['`^~\"]", " ", text)
text <- iconv(text, to="ASCII//TRANSLIT//IGNORE")
text <- gsub("['`^~\"]", "", text)
return(text)
}
df <- read.csv("df_textmining.csv", encoding = "latin1")
df = df %>% select(-X)
table(df$categorie)
table(df$categorie)[1]
table(df$categorie)[1]$value
print(table(df$categorie)[1])
table(df$categorie)["DATA ANALYST"]
table(df$categorie)["DATA ENGINEER"]
install.packages("rsconnect")
setwd("~/Documents/M2_SISE/Text_Mining/Deploy")
library(rsconnect)
rsconnect::setAccountInfo(name='happycompany',
token='F53C9D602466888988EE8EB4036AEDA2',
secret='Jvwc+HDY/IrmVdcoV21WWUmKftpFQNBOjBCK7v6Q')
deployApp()
